//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""InMatchInput"",
            ""id"": ""c775a4a8-b591-42d1-9bf3-d24ef6ca5b76"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""6380929d-79cd-4cdf-a9c3-2f48b8194588"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.2,pressPoint=0.15)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookUp"",
                    ""type"": ""Value"",
                    ""id"": ""989c3d6b-7f0d-4925-bebe-da1a3b2f3871"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""da9a4d32-bed7-48f4-8ecc-6529ba2d10f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""da351b21-e74d-485c-8720-5a3132333fad"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b62e1ece-e8b6-4a2b-8313-88d3adc9a3ca"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2fe4143d-48c0-420f-a053-e56e17875f7a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cceb0f14-c5fc-41bc-9cdb-528aaf3ee0f2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5babbccc-62c1-4155-ae31-095898f9ada5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""id"": ""38dde4d1-6841-43de-a11d-d59d9cf6b5d1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookUp"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f16c37a8-f475-45ec-95a4-6ad8d566d78e"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dd5ac096-05e3-41db-b6da-918c8c3c3190"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bf37daff-9b51-4c4b-9e53-4edf519c5d04"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1d545625-89dd-4448-8ccd-d009fa08e2cb"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""294fcea7-82b3-491a-87f2-ec42e153250b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InMatchInput
        m_InMatchInput = asset.FindActionMap("InMatchInput", throwIfNotFound: true);
        m_InMatchInput_Movement = m_InMatchInput.FindAction("Movement", throwIfNotFound: true);
        m_InMatchInput_LookUp = m_InMatchInput.FindAction("LookUp", throwIfNotFound: true);
        m_InMatchInput_Fire = m_InMatchInput.FindAction("Fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InMatchInput
    private readonly InputActionMap m_InMatchInput;
    private List<IInMatchInputActions> m_InMatchInputActionsCallbackInterfaces = new List<IInMatchInputActions>();
    private readonly InputAction m_InMatchInput_Movement;
    private readonly InputAction m_InMatchInput_LookUp;
    private readonly InputAction m_InMatchInput_Fire;
    public struct InMatchInputActions
    {
        private @PlayerInputActions m_Wrapper;
        public InMatchInputActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_InMatchInput_Movement;
        public InputAction @LookUp => m_Wrapper.m_InMatchInput_LookUp;
        public InputAction @Fire => m_Wrapper.m_InMatchInput_Fire;
        public InputActionMap Get() { return m_Wrapper.m_InMatchInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InMatchInputActions set) { return set.Get(); }
        public void AddCallbacks(IInMatchInputActions instance)
        {
            if (instance == null || m_Wrapper.m_InMatchInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InMatchInputActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @LookUp.started += instance.OnLookUp;
            @LookUp.performed += instance.OnLookUp;
            @LookUp.canceled += instance.OnLookUp;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(IInMatchInputActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @LookUp.started -= instance.OnLookUp;
            @LookUp.performed -= instance.OnLookUp;
            @LookUp.canceled -= instance.OnLookUp;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(IInMatchInputActions instance)
        {
            if (m_Wrapper.m_InMatchInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInMatchInputActions instance)
        {
            foreach (var item in m_Wrapper.m_InMatchInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InMatchInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InMatchInputActions @InMatchInput => new InMatchInputActions(this);
    public interface IInMatchInputActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLookUp(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
}
